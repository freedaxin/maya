var sql_parser = require('../lib/sqlparser');
var assert = require('assert');

var ResultCode = {      "PR_SUCCESS" : 0,
                 "PR_USE_DEFAULT_DB" : 1,
                 "PR_USE_ALL_SHARDS" : 2,
                          "PR_ERROR" : 3,
                  "PR_NOT_SUPPORTED" : 4,
                 };

var sp = new sql_parser.SqlParser();


////////////////////////  string  ///////////////////////////////
exports['select#normal#string'] = function(){
    sp.parse("select 1 from a where uid = 1");
    assert.equal("TK_SQL_SELECT", sp.getTokenName(sp.operation));
    assert.ok(sp.is_read === true);
    assert.equal("a",sp.table_name);
    assert.equal([1].toString(),sp.getRowKeyValue("uid").toString());
    assert.equal(sp.replaceTableName("","b"),"select 1 from `b` where `uid` = 1");
};

////////////////////////  SELECT  ///////////////////////////////

exports['select#normal'] = function(){
    sp.parse(new Buffer("select 1 from a where uid = 1"));
    assert.equal("TK_SQL_SELECT", sp.getTokenName(sp.operation));
    assert.equal("a",sp.table_name);
    assert.equal([1].toString(),sp.getRowKeyValue("uid").toString());
    assert.equal(sp.replaceTableName("","b"),"select 1 from `b` where `uid` = 1");
};

exports['select#*'] = function(){
    sp.parse(new Buffer("select * from a where uid = 1"));
    assert.equal("TK_SQL_SELECT", sp.getTokenName(sp.operation));
    assert.equal("a",sp.table_name);
    assert.equal([1].toString(),sp.getRowKeyValue("uid").toString());
    assert.equal(sp.replaceTableName("","b"),"select * from `b` where `uid` = 1");
};

exports['select#sql_no_cache'] = function(){
    sp.parse(new Buffer("select /*! SQL_NO_CACHE */ id from a where uid = 1"));
    assert.equal("TK_SQL_SELECT", sp.getTokenName(sp.operation));
    assert.equal("a",sp.table_name);
    assert.equal([1].toString(),sp.getRowKeyValue("uid").toString());
    assert.equal(sp.replaceTableName("","b"),"select /*! SQL_NO_CACHE */ `id` from `b` where `uid` = 1");
};

exports['select#with dbname 1'] = function(){
    sp.parse(new Buffer("select 1 from t.a where uid = 1"));
    assert.equal("t",sp.db_name);
    assert.equal("a",sp.table_name);
    assert.equal([1].toString(),sp.getRowKeyValue("uid").toString());
    assert.equal(sp.replaceTableName("t1","b"),"select 1 from `t1`.`b` where `uid` = 1");
};

exports['select#with dbname 2'] = function(){
    sp.parse(new Buffer("select 1 from a where uid = 1"));
    assert.equal("a",sp.table_name);
    assert.equal([1].toString(),sp.getRowKeyValue("uid").toString());
    assert.equal(sp.replaceTableName("x","b"),"select 1 from `x`.`b` where `uid` = 1");
};

exports['select#with table name 1'] = function(){
    sp.parse(new Buffer("select a.c from a where a.uid = 1"));
    assert.equal("a",sp.table_name);
    assert.equal([1].toString(),sp.getRowKeyValue("uid").toString());
    assert.equal(sp.replaceTableName("x","b"),"select `x`.`b` . `c` from `x`.`b` where `x`.`b` . `uid` = 1");
};

exports['select#function call'] = function(){
    sp.parse(new Buffer("select avg(a.c) from a"));
    assert.equal("a",sp.table_name);
    assert.equal(sp.replaceTableName("x","b"),"select avg ( `x`.`b` . `c` ) from `x`.`b`");
};

exports['select#in'] = function(){
    sp.parse(new Buffer("select 1 from a where uid in ( 1 , 2 , 3 , 4 )"));
    assert.equal("a",sp.table_name);
    assert.equal([1 , 2 , 3 , 4].toString(),sp.getRowKeyValue("uid").toString());
    assert.equal(sp.replaceTableName("","b"),"select 1 from `b` where `uid` in ( 1 , 2 , 3 , 4 )");
};

exports['select#with space'] = function(){
    sp.parse(new Buffer("  select 1 from a"));
};

exports['select#bad where claus'] = function(){
    sp.parse(new Buffer("select 1 from a where uid = "));
    assert.equal("a",sp.table_name);
    assert.equal([].toString(),sp.getRowKeyValue("uid"));
};

exports['select#not case sensitive'] = function(){
    sp.parse(new Buffer("sELEct 1 from a"));
    assert.equal("TK_SQL_SELECT", sp.getTokenName(sp.operation));
};

exports['select#bt'] = function(){
    var bt = "select g.mgid,m.cnt from mg_group as g join (select mgid,count(mgid) as cnt from mg_member where uid in(2312769002,1463112157,2610882477,1910364391,1582603897,2072982633,1708930711,2706936212,1891244135,1784696674) and mem_setting=0 group by mgid order by cnt desc) as m on (m.mgid=g.mgid) where g.appkey=3027345222 and g.grp_state in (0,1,2)  limit 0,10";
    sp.parse(new Buffer(bt));
    //assert.equal(ResultCode.PR_USE_DEFAULT_DB, sp.getParseResult(),"getParseResult test Fail: " + sp.getParseResult());
};

exports['select#bad sql1'] = function(){
    sp.parse(new Buffer("selet 123 21 from f  where u=1"));
    assert.equal("",sp.table_name);
};

exports['select#no table name'] = function(){
    sp.parse(new Buffer("select 123 from where u=1"));
    assert.equal("",sp.table_name);
};

exports['select#no from'] = function(){
    var ret = sp.parse(new Buffer("select 123"));
    assert(ret);
    assert.equal("",sp.table_name);
};

exports['select#with db name'] = function(){
    sp.parse(new Buffer("select 123 from myat.usera where uid=1"));
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
    assert.equal("usera",sp.table_name);
};

////////////////////////  INSERT  ///////////////////////////////
exports['insert#insert normal 11'] = function(){
    sp.parse(new Buffer("insert into `usera` (`uid`, `mid`) values(9999,1)"));
    assert.equal("TK_SQL_INSERT", sp.getTokenName(sp.operation));
    assert.ok(sp.is_read === false);
    assert.equal("usera",sp.table_name);
    assert.equal([9999].toString(),sp.getRowKeyValue("uid").toString());
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
};

exports['insert#insert set'] = function(){
    sp.parse(new Buffer("insert into `usera` set `uid`=9999, `mid`=1"));
    assert.equal("TK_SQL_INSERT", sp.getTokenName(sp.operation));
    assert.equal("usera",sp.table_name);
    assert.equal([9999].toString(),sp.getRowKeyValue("uid").toString());
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
};

exports['insert#insert values'] = function(){
    sp.parse(new Buffer("insert into a values (1)"));
    assert.equal([].toString(),sp.getRowKeyValue("as"));
};

exports['insert#insert by select'] = function(){
    sp.parse(new Buffer("insert into a select 1 from b"));
};

exports['insert#insert normal'] = function(){
    sp.parse(new Buffer("INSERT INTO `usera` (`uid`,`name`) values (23,'terry')"));

    assert.equal("usera",sp.table_name);
    assert.equal(["terry"].toString(),sp.getRowKeyValue("name").toString());
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
    assert.equal("INSERT INTO `user_1` ( `uid` , `name` ) values ( 23 , 'terry' )",sp.replaceTableName("","user_1"));
};

exports['insert#with dbname 1'] = function(){
    sp.parse(new Buffer("INSERT INTO a.usera (`uid`,`name`) values (23,'terry')"));
    assert.equal("a",sp.db_name);
    assert.equal("usera",sp.table_name);
    assert.equal(["terry"].toString(),sp.getRowKeyValue("name").toString());
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
    assert.equal("INSERT INTO `a`.`user_1` ( `uid` , `name` ) values ( 23 , 'terry' )",sp.replaceTableName("a","user_1"));
};

exports['insert#with dbname 2'] = function(){
    sp.parse(new Buffer("INSERT INTO usera (`uid`,`name`) values (23,'terry')"));
    assert.equal("usera",sp.table_name);
    assert.equal(["terry"].toString(),sp.getRowKeyValue("name").toString());
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
    assert.equal("INSERT INTO `a`.`user_1` ( `uid` , `name` ) values ( 23 , 'terry' )",sp.replaceTableName("a","user_1"));
};

exports['insert#with dbname 3'] = function(){
    sp.parse(new Buffer("INSERT INTO a.usera (`uid`,`name`) values (23,'terry')"));
    assert.equal("usera",sp.table_name);
    assert.equal(["terry"].toString(),sp.getRowKeyValue("name").toString());
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
    assert.equal("INSERT INTO `a` . `user_1` ( `uid` , `name` ) values ( 23 , 'terry' )",sp.replaceTableName("","user_1"));
};

exports['insert#no table name'] = function(){
    sp.parse(new Buffer("insert into values (1)"));
    assert.equal("",sp.table_name);
    assert.equal([].toString(),sp.getRowKeyValue("as"));
};

////////////////////////  REPLACE  ///////////////////////////////
exports['#replace #normal'] = function(){
    sp.parse(new Buffer("replace into `usera` (`uid`, `mid`) values(9999,1)"));
    assert.equal("TK_SQL_REPLACE", sp.getTokenName(sp.operation));
    assert.equal("usera",sp.table_name);
    assert.equal([9999].toString(),sp.getRowKeyValue("uid").toString());
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
};
////////////////////////  UPDATE  ///////////////////////////////

exports['update#update normal'] = function(){
    sp.parse(new Buffer("Update usera set name = '123' where uid=12 and name='terry'"));
    assert.equal("TK_SQL_UPDATE", sp.getTokenName(sp.operation));
    assert.ok(sp.is_read === false);
    assert.equal("usera",sp.table_name);
    assert.equal(["terry"].toString(),sp.getRowKeyValue("name").toString());
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
    assert.equal("Update `user_1` set `name` = '123' where `uid` = 12 and `name` = 'terry'", sp.replaceTableName("","user_1"));

};

exports['update#with dbname 1'] = function(){
    sp.parse(new Buffer("Update a.usera set name = '123' where uid=12 and name='terry'"));
    assert.equal("usera",sp.table_name);
    assert.equal("a",sp.db_name);
    assert.equal(["terry"].toString(),sp.getRowKeyValue("name").toString());
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
    assert.equal("Update `a`.`user_1` set `name` = '123' where `uid` = 12 and `name` = 'terry'", sp.replaceTableName("a","user_1"));

};
exports['update#with dbname 2'] = function(){
    sp.parse(new Buffer("Update usera set name = '123' where uid=12 and name='terry'"));
    assert.equal("",sp.db_name);
    assert.equal("usera",sp.table_name);
    assert.equal(["terry"].toString(),sp.getRowKeyValue("name").toString());
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
    assert.equal("Update `a`.`user_1` set `name` = '123' where `uid` = 12 and `name` = 'terry'", sp.replaceTableName("a","user_1"));

};
exports['update#with dbname 3'] = function(){
    sp.parse(new Buffer("Update a.usera set name = '123' where uid=12 and name='terry'"));
    assert.equal("usera",sp.table_name);
    assert.equal(["terry"].toString(),sp.getRowKeyValue("name").toString());
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
    assert.equal("Update `a`.`user_1` set `name` = '123' where `uid` = 12 and `name` = 'terry'", sp.replaceTableName("a","user_1"));

};

exports['update#in'] = function(){
    sp.parse(new Buffer("Update usera set name = '123' where uid in (12,13) and name in ( 'terry' , 'sherry' )"));
    assert.equal("usera",sp.table_name);
    assert.equal(["terry", "sherry"].toString(),sp.getRowKeyValue("name").toString());
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
    assert.equal("Update `user_1` set `name` = '123' where `uid` in ( 12 , 13 ) and `name` in ( 'terry' , 'sherry' )", sp.replaceTableName("","user_1"));
};


////////////////////////  DELETE  ///////////////////////////////

exports['delete#delete normal'] = function(){
    sp.parse(new Buffer("delete from a where uid = 1"));
    assert.equal("TK_SQL_DELETE", sp.getTokenName(sp.operation));
    assert.ok(sp.is_read === false);
    assert.equal("a",sp.table_name);
    assert.equal([1].toString(),sp.getRowKeyValue("uid").toString());
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
    assert.equal("delete from `b` where `uid` = 1",sp.replaceTableName("","b"));
};

exports['delete#with db name'] = function(){
    sp.parse(new Buffer("delete from t.a where uid = 1"));
    assert.equal("TK_SQL_DELETE", sp.getTokenName(sp.operation));
    assert.equal("t",sp.db_name);
    assert.equal("a",sp.table_name);
    assert.equal([1].toString(),sp.getRowKeyValue("uid").toString());
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
    assert.equal("delete from `t` . `b` where `uid` = 1",sp.replaceTableName("","b"));
};

exports['delete#no table name'] = function(){
    sp.parse(new Buffer("delete from where uid = 1"));
    assert.equal("",sp.table_name);
};

////////////////////////  TRANSACTION ///////////////////////////////

exports['transaction#begin'] = function(){
    sp.parse(new Buffer("BEGIN"));
    assert.equal("TK_SQL_BEGIN", sp.getTokenName(sp.operation));
    assert.ok(sp.is_read === false);
    assert.equal("",sp.table_name);
    assert.equal([].toString(),sp.getRowKeyValue("uid"));
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
};

exports['transaction#set a = 0'] = function(){
    sp.parse(new Buffer("set autocommit=0"));
    assert.equal("TK_SQL_SET", sp.getTokenName(sp.operation));
    assert.ok(sp.is_read === false);
    // not supported
    assert.equal("",sp.table_name);
    assert.equal([].toString(),sp.getRowKeyValue("uid"));
};
exports['transaction#set a = 1'] = function(){
    sp.parse(new Buffer("set autocommit=1"));
    assert.equal("TK_SQL_SET", sp.getTokenName(sp.operation));
    assert.equal("",sp.table_name);
    assert.equal([].toString(),sp.getRowKeyValue("uid"));
};
exports['transaction#not begin'] = function(){
    sp.parse(new Buffer("BEGINFA"));
    assert.equal("TK_LITERAL", sp.getTokenName(sp.operation));
    assert.ok(sp.is_read === false);
    assert.equal("",sp.table_name);
    assert.equal([].toString(),sp.getRowKeyValue("uid"));
};

exports['transaction#start'] = function(){
    sp.parse(new Buffer("start"));
    assert.equal("TK_SQL_START", sp.getTokenName(sp.operation));
    assert.ok(sp.is_read === false);
    assert.equal("",sp.table_name);
    assert.equal([].toString(),sp.getRowKeyValue("uid"));
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
};
exports['transaction#not start'] = function(){
    sp.parse(new Buffer("STARTASD"));
    assert.equal("TK_LITERAL", sp.getTokenName(sp.operation));
    assert.ok(sp.is_read === false);
    assert.equal("",sp.table_name);
    assert.equal([].toString(),sp.getRowKeyValue("uid"));
};

exports['transaction#commit'] = function(){
    sp.parse(new Buffer("COMMIT"));
    assert.equal("TK_SQL_COMMIT", sp.getTokenName(sp.operation));
    assert.ok(sp.is_read === false);
    assert.equal("",sp.table_name);
    assert.equal([].toString(),sp.getRowKeyValue("uid"));
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
};


exports['transaction#rollback'] = function(){
    sp.parse(new Buffer("ROLLBACK"));
    assert.equal("TK_SQL_ROLLBACK", sp.getTokenName(sp.operation));
    assert.ok(sp.is_read === false);
    assert.equal("",sp.table_name);
    assert.equal([].toString(),sp.getRowKeyValue("uid"));
    assert.equal(ResultCode.PR_SUCCESS, sp.getParseResult());
};
////////////////////////  OTHER  ///////////////////////////////

exports['comment#a comment'] = function(){
    sp.parse(new Buffer("/*120213 10:38:24 server id 182134623  end_log_pos 308 	Query	thread_id=982070707	exec_time=1	error_code=0*/"));
    assert.equal("TK_COMMENT", sp.getTokenName(sp.operation));
    assert.ok(sp.is_read === false);
    assert.equal("",sp.table_name);
    assert.equal([].toString(),sp.getRowKeyValue("uid"));
};

exports['use#use database'] = function(){
    var set = "use userinfo;";
    sp.parse(new Buffer(set));
    assert.equal("TK_SQL_USE", sp.getTokenName(sp.operation));
    assert.ok(sp.is_read === false);
    assert.equal("",sp.table_name);
    assert.equal([].toString(),sp.getRowKeyValue("uid"));
};

exports['prepare#'] = function(){
    sp.parse(new Buffer("prepare myprepare from \"select a from b where b=?\""));
};

exports['select#in#where nothing'] = function(){
    sp.parse("select 1 from a where ");
    assert.equal("TK_SQL_SELECT", sp.getTokenName(sp.operation));
    assert.equal("a",sp.table_name);
    assert.equal([].toString(),sp.getRowKeyValue("uid").toString());
};

exports['select#in#where no ='] = function(){
    sp.parse("select 1 from a where uid");
    assert.equal("TK_SQL_SELECT", sp.getTokenName(sp.operation));
    assert.equal("a",sp.table_name);
    assert.equal([].toString(),sp.getRowKeyValue("uid").toString());
};

exports['select#in#where rowkey = novalue'] = function(){
    sp.parse("select 1 from a where uid=");
    assert.equal("TK_SQL_SELECT", sp.getTokenName(sp.operation));
    assert.equal("a",sp.table_name);
    assert.equal([].toString(),sp.getRowKeyValue("uid").toString());
};

exports['select#in#row key value sql error'] = function(){
    sp.parse("select 1 from a where uid in (1, 2");
    assert.equal("TK_SQL_SELECT", sp.getTokenName(sp.operation));
    assert.equal("a",sp.table_name);
    assert.equal([1,2].toString(),sp.getRowKeyValue("uid").toString());
    assert.equal(sp.replaceTableName("","b"),"select 1 from `b` where `uid` in ( 1 , 2");
};

exports['explain'] = function(){
    sp.parse("explain select 1 from a where uid in (1, 2)");
    assert.equal("TK_SQL_EXPLAIN", sp.getTokenName(sp.operation));
    assert.ok(sp.is_read === true);
    assert.equal("a",sp.table_name);
    assert.equal([1,2].toString(),sp.getRowKeyValue("uid").toString());
    assert.equal(sp.replaceTableName("","b"),"explain select 1 from `b` where `uid` in ( 1 , 2 )");
};

exports['empty sql'] = function(){
    sp.parse(new Buffer(0));
    assert.equal(undefined, sp.operation);
    assert.ok(sp.is_read === false);
    assert.equal(undefined,sp.table_name);
};

exports['set names'] = function(){
    sp.parse(new Buffer('set names utf8'));
    assert.equal("TK_SQL_SET", sp.getTokenName(sp.operation));
    assert.equal(sp.getAllTokens().toString(), ['set', 'names', 'utf8'].toString());
};

exports['set @@'] = function(){
    sp.parse(new Buffer('set @@global.sort_buffer_size=1000000, @a=\'abc\''));
    assert.equal("TK_SQL_SET", sp.getTokenName(sp.operation));
    assert.equal(sp.getAllTokens().toString(),
        ['set', '@@global', '.', 'sort_buffer_size', '=', '1000000',
        ',', '@a', '=', '\'abc\''].toString());
};

